#!/opt/local/bin/perl -w

use strict;
use Finance::QIF;
use Data::Dumper;

my $out = Finance::QIF->new(file => ">-",);
my $header = "Type:Invst";
$out->header($header);

my %monthy = ( jan => '01', feb => '02', mar => '03', 
	       apr => '04', may => '05', jun => '06',
	       jul => '07', aug => '08', sep => '09',
	       oct => '10', nov => '11', dec => '12');

# action matrix
my $action = {
	'Switch In' => "Buy",
	Sale => "Sell",
	'Switch Out' => "Sell",
	'Investment Regular' => "BuyX",
	'Re-registration Transfer In' => "BuyX",
	'Cash Transfer In' => "BuyX",
	'Tax Reclaim Reinvestment' => "ReinvDiv",
	'Dividend Reinvestment' => "ReinvDiv",
	'Investment Lump Sum' => "BuyX",
	'Trail Rebate' => "MiscInc",
	'Cash Withdrawal' => "Xout",
	'Sale Proceeds' => "",
};

# account matrix dependent on action/description
my $account = {
	'Switch In' => "",
	Sale => "",
	'Switch Out' => "",
	'Investment Regular' => "Investment:Buy",
	'Re-registration Transfer In' => "Investment:TransferIn",
	'Cash Transfer In' => "Investment:TransferIn",
	'Tax Reclaim Reinvestment' => "Investment:Tax-reclaim",
	'Dividend Reinvestment' => "Investment:Dividends",
	'Investment Lump Sum' => "Investment:Buy",
	'Trail Rebate' => "Investment:Rebate",
	'Cash Withdrawal' => "Investment:TransferOut",
	'Sale Proceeds' => "",
};

# dispose of header
$_ = <STDIN>;
# data
while (<STDIN>) {
	# strip out currency symbol
	s/,//g;
# Holding	Date	Description	In (GBP)	Out (GBP)	Price date	Price(p)	Units/Shares	Int charge (GBP)
	#unless (m/([^\t]+)\t+([^\t]+)\t+([^\t]+)\t+([^\t]+)\t+([^\t]+)\t+([^\t]+)\t+([^\t]+)\t+([^\t\n]+)/) {
	unless (m/([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t\n]+)/) {
#	unless (m/(?:([^\t]*)\t){8}([^\t\n]+)/) {
		print "Bad record: " . $_;
		next;
	}
	my $record = {
		header => $header,
#		security => $1,
		date => $2,
		memo => $3,
		action => $action->{$3},
		account => $account->{$3},
		commission => 0,
	};

	next if ($3 eq "Sale Proceeds");

	# sort out the transaction amount
	if ($3 eq "Re-registration Transfer In") {
		$record->{amount} = $7 * $8;
	} elsif ($3 eq "Cash Withdrawal") {
		$record->{amount} = -$5;
	} else {
		$record->{amount} = $4 ? $4 : $5;
	}
		
	if ($3 eq "Trail Rebate") {
		$record->{security} = "Cash Reserve";
		$record->{price} = 1;
	}

	# sort out the cash reserve
	if ($1 eq "Cash Reserve") {
		$record->{price} = 1;
	} elsif ($7 =~ /[\d\.]+$/) {
		# convert GBP to pence
		$record->{price} = $7 / 100;
	}
	# write out the fund transaction
#	print Dumper($record);
	$out->write($record);
}

$out->close;
